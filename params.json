{"name":"Rest-api-costume-contest","tagline":"Rails REST API that gives clients costume contest results in json","body":"#Rails REST API that gives clients costume contest results in json\r\n\r\n##What is this?\r\nThis limited REST API example-project gives clients costume contest results in json format. The backend is Ruby on Rails with help from the [active_model_serializers gem](https://github.com/rails-api/active_model_serializers). \r\n\r\n##Endpoints?\r\n###Three endpoints:\r\n1. get a list of contests\r\n2. get a single contest, with all of that contest’s categories, and with the entries for those categories\r\n3. get a single category from a contest, with the entries for that category\r\n\r\n###Example URLs (as viewed in a web browser, ‘real’ clients would leave off the .json extension and ask for json in a request header):\r\n\r\n* [http://rest-api-costume-contest.herokuapp.com/api/v1/contests.json](http://rest-api-costume-contest.herokuapp.com/api/v1/contests.json)\r\n* [http://rest-api-costume-contest.herokuapp.com/api/v1/contests/1.json](http://rest-api-costume-contest.herokuapp.com/api/v1/contests/1.json)\r\n* [http://rest-api-costume-contest.herokuapp.com/api/v1/contests/1/categories/1.json](http://rest-api-costume-contest.herokuapp.com/api/v1/contests/1/categories/1.json)\r\n\r\n##Why did I make this?\r\nThis mini-project was an effort to learn to REST/API, and how that could be implemented and served from a Ruby on Rails backend.\r\n\r\n##What technology/skills were learned/retrieved?\r\n* REST and APIs (concepts, Rails implementation)\r\n* Rails, associations (has many through), rails routing, namespacing, scaffolding, and the active_model_serializers gem\r\n* json\r\n\r\n##Why make an API about costume contest results?\r\nI wanted to do a costume contest app in a full blown Rails app, and this api project was a way to try the idea. After this, do I still want to make a full app? No - there is a limited audience, it’s more complex than I thought, and contest creators seem happy using blogs and tumblr to record and publish their contests.\r\n\r\n##Limitations:\r\n* No POST, DELETE or PUT actions. In my self-imposed time-constraint, implementing just the GET requests was challenging. In this rails app, the API and backend rails models are not 1 to 1. A 1 to 1 API may be appropriate in some apps, but in this case a meaningful API response for costume contest results involves assembling associated data from a variety of models. \r\n* Another limitation is that this app does NOT have a meaningful front-end - this project was meant for serving a REST API.\r\n\r\n##What more could be explored?\r\n* Different REST verbs (this only does GET for now)\r\n* Security and Authentication\r\n* Compliance to jsonapi.org standards\r\n* Error Handling\r\n* Documentation\r\n* Regression Tests\r\n* Versioning - although this API has namespace versioning, a second version has not been implemented yet\r\n* Client consumption\r\n\r\n##Tech references:\r\nactive_model_serializers gem:\r\n[https://github.com/rails-api/active_model_serializers](https://github.com/rails-api/active_model_serializers)\r\n\r\nRailsCast Episode about using active_model_serializer gem\r\n[http://railscasts.com/episodes/409-active-model-serializers](http://railscasts.com/episodes/409-active-model-serializers)\r\n\r\nRailsCast Episode about simple API versioning [http://railscasts.com/episodes/350-rest-api-versioning](http://railscasts.com/episodes/350-rest-api-versioning)\r\n\r\nRails Routing Guide\r\n[http://guides.rubyonrails.org/routing.html](http://guides.rubyonrails.org/routing.html)\r\n\r\nYoutube, in particular:\r\nBuilding a web API with Ruby on Rails\r\n[https://www.youtube.com/watch?v=36M2BSA2LYk](https://www.youtube.com/watch?v=36M2BSA2LYk)\r\n\r\n##References: \r\n###Costume Contest Data:\r\nA-Kon 25 2014\r\n[http://www.a-kon.com/?p=6675](http://www.a-kon.com/?p=6675)\r\n\r\nFlorida SuperCon 2014\r\n[http://floridasupercon.com/2014-fsc-costume-contest-winners](http://floridasupercon.com/2014-fsc-costume-contest-winners)\r\n\r\nEmerald City Comicon 2014 [http://emeraldcitycomicon.tumblr.com/post/83655440535/here-are-the-winners-of-the-eccc-costume-contest](http://emeraldcitycomicon.tumblr.com/post/83655440535/here-are-the-winners-of-the-eccc-costume-contest)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}